{
	"info": {
		"_postman_id": "c3d50ed7-5abf-4bf7-91bb-30ddfc213ac2",
		"name": "API Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28855895"
	},
	"item": [
		{
			"name": "GetSignleObject Happy flow",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('Validate response', function () {\r",
							"    pm.expect(pm.response.json()).to.deep.equal({\r",
							"        'id': '7',\r",
							"        'name': 'Apple MacBook Pro 16',\r",
							"        'data': {\r",
							"            'year': 2019,\r",
							"            'price': 1849.99,\r",
							"            'CPU model': 'Intel Core i9',\r",
							"            'Hard disk size': '1 TB'\r",
							"        }\r",
							"    });\r",
							"})\r",
							"\r",
							"pm.test('Validate name to Apple MacBook Pro 16', function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const name = jsonData.name;\r",
							"    pm.expect(name).to.eql('Apple MacBook Pro 16');\r",
							"})\r",
							"\r",
							"pm.test(\"Validate whether it is a single object\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const isArray = Array.isArray(jsonData);\r",
							"    pm.expect(isArray).to.be.false;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/objects/7",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetSignleObject Unhappy flow",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Validate response\", function () {\r",
							"    pm.expect(pm.response.json()).to.deep.equal({\r",
							"    \"id\": \"14\",\r",
							"    \"name\": \"Apple iPad Air\",\r",
							"    \"data\": null\r",
							"})\r",
							"});\r",
							"\r",
							"pm.test(\"Validate name to Apple MacBook Pro 16\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const name=jsonData.data;\r",
							"    pm.expect(name).to.eql(null);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/objects/14",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects",
						"14"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetListOfAllObjects Happy flow",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Validate response\", function () {\r",
							"    pm.expect(pm.response.json()).to.deep.equal([\r",
							"    {\r",
							"        \"id\": \"1\",\r",
							"        \"name\": \"Google Pixel 6 Pro\",\r",
							"        \"data\": {\r",
							"            \"color\": \"Cloudy White\",\r",
							"            \"capacity\": \"128 GB\"\r",
							"        }\r",
							"    },\r",
							"    {\r",
							"        \"id\": \"2\",\r",
							"        \"name\": \"Apple iPhone 12 Mini, 256GB, Blue\",\r",
							"        \"data\": null\r",
							"    },\r",
							"    {\r",
							"        \"id\": \"3\",\r",
							"        \"name\": \"Apple iPhone 12 Pro Max\",\r",
							"        \"data\": {\r",
							"            \"color\": \"Cloudy White\",\r",
							"            \"capacity GB\": 512\r",
							"        }\r",
							"    },\r",
							"    {\r",
							"        \"id\": \"4\",\r",
							"        \"name\": \"Apple iPhone 11, 64GB\",\r",
							"        \"data\": {\r",
							"            \"price\": 389.99,\r",
							"            \"color\": \"Purple\"\r",
							"        }\r",
							"    },\r",
							"    {\r",
							"        \"id\": \"5\",\r",
							"        \"name\": \"Samsung Galaxy Z Fold2\",\r",
							"        \"data\": {\r",
							"            \"price\": 689.99,\r",
							"            \"color\": \"Brown\"\r",
							"        }\r",
							"    },\r",
							"    {\r",
							"        \"id\": \"6\",\r",
							"        \"name\": \"Apple AirPods\",\r",
							"        \"data\": {\r",
							"            \"generation\": \"3rd\",\r",
							"            \"price\": 120\r",
							"        }\r",
							"    },\r",
							"    {\r",
							"        \"id\": \"7\",\r",
							"        \"name\": \"Apple MacBook Pro 16\",\r",
							"        \"data\": {\r",
							"            \"year\": 2019,\r",
							"            \"price\": 1849.99,\r",
							"            \"CPU model\": \"Intel Core i9\",\r",
							"            \"Hard disk size\": \"1 TB\"\r",
							"        }\r",
							"    },\r",
							"    {\r",
							"        \"id\": \"8\",\r",
							"        \"name\": \"Apple Watch Series 8\",\r",
							"        \"data\": {\r",
							"            \"Strap Colour\": \"Elderberry\",\r",
							"            \"Case Size\": \"41mm\"\r",
							"        }\r",
							"    },\r",
							"    {\r",
							"        \"id\": \"9\",\r",
							"        \"name\": \"Beats Studio3 Wireless\",\r",
							"        \"data\": {\r",
							"            \"Color\": \"Red\",\r",
							"            \"Description\": \"High-performance wireless noise cancelling headphones\"\r",
							"        }\r",
							"    },\r",
							"    {\r",
							"        \"id\": \"10\",\r",
							"        \"name\": \"Apple iPad Mini 5th Gen\",\r",
							"        \"data\": {\r",
							"            \"Capacity\": \"64 GB\",\r",
							"            \"Screen size\": 7.9\r",
							"        }\r",
							"    },\r",
							"    {\r",
							"        \"id\": \"11\",\r",
							"        \"name\": \"Apple iPad Mini 5th Gen\",\r",
							"        \"data\": {\r",
							"            \"Capacity\": \"254 GB\",\r",
							"            \"Screen size\": 7.9\r",
							"        }\r",
							"    },\r",
							"    {\r",
							"        \"id\": \"12\",\r",
							"        \"name\": \"Apple iPad Air\",\r",
							"        \"data\": {\r",
							"            \"Generation\": \"4th\",\r",
							"            \"Price\": \"419.99\",\r",
							"            \"Capacity\": \"64 GB\"\r",
							"        }\r",
							"    },\r",
							"    {\r",
							"        \"id\": \"13\",\r",
							"        \"name\": \"Apple iPad Air\",\r",
							"        \"data\": {\r",
							"            \"Generation\": \"4th\",\r",
							"            \"Price\": \"519.99\",\r",
							"            \"Capacity\": \"256 GB\"\r",
							"        }\r",
							"    }\r",
							"])\r",
							"});\r",
							"\r",
							"pm.test(\"Validate number of objects in a response\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const length=jsonData.length;\r",
							"    pm.expect(length).to.eql(13);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/objects",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetListOfAllObjects Unhappy flow Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 404', function () {\r",
							"    pm.response.to.have.status(404);\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"pm.test('Validate error value to be Not Found', function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const error = jsonData.error;\r",
							"    pm.expect(error).to.eql('Not Found');\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/object",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"object"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetListOfObjectById Happy flow",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",function()\r",
							"{\r",
							"pm.response.to.have.status(200);\r",
							"}\r",
							")\r",
							"\r",
							"pm.test('Validate response', function () {\r",
							"    pm.expect(pm.response.json()).to.deep.equal([\r",
							"    {\r",
							"        \"id\": \"3\",\r",
							"        \"name\": \"Apple iPhone 12 Pro Max\",\r",
							"        \"data\": {\r",
							"            \"color\": \"Cloudy White\",\r",
							"            \"capacity GB\": 512\r",
							"        }\r",
							"    },\r",
							"    {\r",
							"        \"id\": \"5\",\r",
							"        \"name\": \"Samsung Galaxy Z Fold2\",\r",
							"        \"data\": {\r",
							"            \"price\": 689.99,\r",
							"            \"color\": \"Brown\"\r",
							"        }\r",
							"    },\r",
							"    {\r",
							"        \"id\": \"10\",\r",
							"        \"name\": \"Apple iPad Mini 5th Gen\",\r",
							"        \"data\": {\r",
							"            \"Capacity\": \"64 GB\",\r",
							"            \"Screen size\": 7.9\r",
							"        }\r",
							"    }\r",
							"]);\r",
							"})\r",
							"pm.test(\"Validate number of objects in a response\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const length=jsonData.length;\r",
							"    pm.expect(length).to.eql(3);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var objid=[3,5,10]\r",
							"var queryparams=objid.map(function(value){\r",
							"return 'id='+value\r",
							"}).join('&')\r",
							"pm.variables.set('queryparams',queryparams);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/objects?{{queryparams}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects"
					],
					"query": [
						{
							"key": "{{queryparams}}",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetListOfObjectById Unhappy flow",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",function()\r",
							"{\r",
							"pm.response.to.have.status(200);\r",
							"}\r",
							")\r",
							"\r",
							"pm.test('Validate response', function () {\r",
							"    pm.expect(pm.response.json()).to.deep.equal([\r",
							"    {\r",
							"        \"id\": \"3\",\r",
							"        \"name\": \"Apple iPhone 12 Pro Max\",\r",
							"        \"data\": {\r",
							"            \"color\": \"Cloudy White\",\r",
							"            \"capacity GB\": 512\r",
							"        }\r",
							"    },\r",
							"    {\r",
							"        \"id\": \"5\",\r",
							"        \"name\": \"Samsung Galaxy Z Fold2\",\r",
							"        \"data\": {\r",
							"            \"price\": 689.99,\r",
							"            \"color\": \"Brown\"\r",
							"        }\r",
							"    }\r",
							"]);\r",
							"})\r",
							"pm.test(\"Validate number of objects in a response\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const length=jsonData.length;\r",
							"    pm.expect(length).to.eql(2);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var objid=[3,5,100]\r",
							"var queryparams=objid.map(function(value){\r",
							"return 'id='+value\r",
							"}).join('&')\r",
							"pm.variables.set('queryparams',queryparams);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/objects?{{queryparams}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects"
					],
					"query": [
						{
							"key": "{{queryparams}}",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Object Happy Flow",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Validate the response', function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const name = jsonData.name;\r",
							"    pm.expect(name).to.eql('Apple MacBook Pro 16');\r",
							"    const {year,price}=jsonData.data;\r",
							"    pm.expect(year).to.eql(2019);\r",
							"    pm.expect(price).to.eql(1849.99);\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"Apple MacBook Pro 16\",\r\n   \"data\": {\r\n      \"year\": 2019,\r\n      \"price\": 1849.99,\r\n      \"CPU model\": \"Intel Core i9\",\r\n      \"Hard disk size\": \"1 TB\"\r\n   }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/objects",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Object Unhappy Flow",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 Bad Request\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Validate the response', function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const error = jsonData.error;\r",
							"    pm.expect(error).to.eql('400 Bad Request. If you are trying to create or update the data, potential issue is that you are sending incorrect body json or it is missing at all.');\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/objects",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"objects"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.restful-api.dev",
			"type": "string"
		}
	]
}